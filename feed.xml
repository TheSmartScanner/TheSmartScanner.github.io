<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://www.thesmartscanner.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.thesmartscanner.com/" rel="alternate" type="text/html" /><updated>2022-04-10T06:36:27+00:00</updated><id>https://www.thesmartscanner.com/feed.xml</id><subtitle>SmartScanner is an AI-powered web vulnerability scanner for testing  the security of web sites and applications</subtitle><entry><title type="html">Is your robots.txt file vulnerable? Here’s how to check and secure it</title><link href="https://www.thesmartscanner.com/blog/is-your-robots-txt-file-vulnerable-here-s-how-to-check-and-secure-it" rel="alternate" type="text/html" title="Is your robots.txt file vulnerable? Here’s how to check and secure it" /><published>2022-03-27T00:00:00+00:00</published><updated>2022-03-27T00:00:00+00:00</updated><id>https://www.thesmartscanner.com/blog/is-your-robots-txt-file-vulnerable-here-s-how-to-check-and-secure-it</id><content type="html" xml:base="https://www.thesmartscanner.com/blog/is-your-robots-txt-file-vulnerable-here-s-how-to-check-and-secure-it">&lt;p&gt;A bad configured Robots.txt file is like a welcome sign to your website for hackers.
Let’s see how to set up an efficient and secure robots.txt.&lt;/p&gt;

&lt;p&gt;Can a Robots.txt file be vulnerable? Yes, Here’s how to create a secure one.
Is your robots.txt file vulnerable? Here’s how to check and secure it
Beware of Robots.txt! You should not reveal everything to robots.&lt;/p&gt;

&lt;h2 id=&quot;what-is-robotstxt&quot;&gt;What is robots.txt&lt;/h2&gt;
&lt;p&gt;Actually, the robots.txt file is not vulnerable by itself.
Robots.txt is a file for web robots. Web robots or web spiders and crawlers are programs that search the web for collecting content. Search engine robots like google collect your web page contents for indexing it and spammer robots &lt;a href=&quot;/vulnerability-list/email-address-disclosure&quot;&gt;look for email addresses&lt;/a&gt; and other things on your website.&lt;/p&gt;

&lt;p&gt;Web robots look for the robots.txt file at the main directory (typically your root domain or homepage) of any website.&lt;/p&gt;

&lt;h2 id=&quot;anatomy-of-a-robotstxt&quot;&gt;Anatomy of a robots.txt&lt;/h2&gt;
&lt;p&gt;In robots.txt, you can put instructions about your website for web robots; these instructions are called &lt;em&gt;The Robots Exclusion Protocol&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Each line of a robots.txt file consists of a field, a colon, and a value. Comments are preceded with &lt;code&gt;#&lt;/code&gt; character and white spaces are optional. So, the general syntax is like below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;field&amp;gt;:&amp;lt;value&amp;gt;&amp;lt;#optional-comment&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Common fields are followings:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;user-agent&lt;/code&gt;: identifies which crawler the rules apply to.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;allow&lt;/code&gt;: a URL path that may be crawled.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;disallow&lt;/code&gt;: a URL path that may not be crawled.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;noindex&lt;/code&gt;: unofficial directive for preventing search engines from indexing a page&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;sitemap&lt;/code&gt;: the complete URL of a sitemap.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By default, robots try to crawl all your website or at least as many pages as they choose. But using the above directives you can guide them about crawling your website.
The &lt;code&gt;allow&lt;/code&gt; and &lt;code&gt;disallow&lt;/code&gt; are the most used directives for instructing robots about what pages they can crawl and what they shouldn’t.
Using the &lt;code&gt;user-agent&lt;/code&gt; you can associate rules with specific user agents (robots).&lt;/p&gt;

&lt;p&gt;For example, consider the below sample robots.txt.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user-agent: *
allow: /*

user-agent: googlebot*
disallow: /oldui/

sitemap: https://example.com/sitemap.xml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This robots.txt means that any robot (&lt;code&gt;user-agent: *&lt;/code&gt;) is allowed to crawl any URL (&lt;code&gt;allow: /*&lt;/code&gt;). But the google bot (&lt;code&gt;user-agent: googlebot*&lt;/code&gt;) is not allowed to crawl the &lt;code&gt;/oldui/&lt;/code&gt; URL. This sample also includes a link to the sitemap.&lt;/p&gt;

&lt;h2 id=&quot;the-evils-nest&quot;&gt;The evil’s nest&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;disallow&lt;/code&gt; and &lt;code&gt;noindex&lt;/code&gt; are usually misunderstood. Using these two directives for hiding pages from google and robots seems to be a good idea. But the truth is these directives are not respected by all web robots. You should keep in mind that robots.txt is a public file that can be accessed by both google bot and an attacker.&lt;/p&gt;

&lt;p&gt;So if you put something like &lt;code&gt;disallow: /admin/&lt;/code&gt; in your robots.txt file, you’re actually revealing the URL of your website admin section.&lt;/p&gt;

&lt;p&gt;If you add any web pages of your website in the robots.txt file, that file will be accessed by the whole internet like the home page of your website. So robots.txt is not a locker where you can &lt;a href=&quot;/vulnerability-list/hidden-resource-in-robots-txt&quot;&gt;hide your secrets&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have a public web page but you don’t want it to be indexed and shown in search results, you can use the disallow directive.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The robots.txt is a good tool for optimizing the experience of your website’s robot visitors. But it’s not just for robots, and not all robots are friendly. So do not put sensitive information in the robots.txt file.&lt;/p&gt;</content><author><name></name></author><category term="Information Disclosure" /><category term="SEO" /><summary type="html">A bad configured Robots.txt file is like a welcome sign to your website for hackers. Let’s see how to set up an efficient and secure robots.txt.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.thesmartscanner.com/assets/img/robots.webp" /><media:content medium="image" url="https://www.thesmartscanner.com/assets/img/robots.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">How to Secure your NodeJs Express Javascript Application - part 2</title><link href="https://www.thesmartscanner.com/blog/how-to-secure-your-nodejs-express-javascript-application-part-2" rel="alternate" type="text/html" title="How to Secure your NodeJs Express Javascript Application - part 2" /><published>2022-02-21T00:00:00+00:00</published><updated>2022-02-21T00:00:00+00:00</updated><id>https://www.thesmartscanner.com/blog/how-to-secure-your-nodejs-express-javascript-application---part-2-</id><content type="html" xml:base="https://www.thesmartscanner.com/blog/how-to-secure-your-nodejs-express-javascript-application-part-2">&lt;p&gt;Express is an easy-to-use web framework for NodeJs. In this article, we will review some of the common vulnerabilities in NodeJs Express projects and explain mitigations against them.&lt;/p&gt;

&lt;p&gt;This is the second part of the NodeJs Express Security series. If you haven’t read the previous part you can read it on the below URL.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://www.thesmartscanner.com/blog/how-to-secure-your-nodejs-express-javascript-application-part-1&quot;&gt;How to Secure your NodeJs Express Javascript Application - part 1&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s see how we can make our Express software more secure.&lt;/p&gt;

&lt;h2 id=&quot;limit-input&quot;&gt;Limit input&lt;/h2&gt;
&lt;p&gt;Allowing clients to send huge request body can be abused for a denial of service (DoS) attack. To prevent DoS attacks always set a maximum request size for the input. Use the below code to limit input size.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;var contentType = require('content-type')
var express = require('express')
var getRawBody = require('raw-body')

var app = express()

app.use(function (req, res, next) {
  getRawBody(req, {
    length: req.headers['content-length'],
    limit: '1mb',
    encoding: contentType.parse(req).parameters.charset
  }, function (err, string) {
    if (err) return next(err)
    req.text = string
    next()
  })
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also set request size for different content types:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;app.use(express.urlencoded({ extended: true, limit: &quot;1kb&quot; }));
app.use(express.json({ limit: &quot;1kb&quot; }));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Other than input size you should limit the Transaction per Second/Minute (TPS/TPM) rate. If you don’t set a rate limitation for your sensitive APIs like login, you expose yourself to a &lt;a href=&quot;/vulnerability-list/brute-force-prevention-bypassed&quot;&gt;Brute Force&lt;/a&gt; attack. Packages like &lt;a href=&quot;https://www.npmjs.com/package/express-brute&quot;&gt;express-brute&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/express-bouncer&quot;&gt;express-bouncer&lt;/a&gt; and &lt;a href=&quot;https://www.npmjs.com/package/express-limiter&quot;&gt;express-limiter&lt;/a&gt; are some sample packages you can use for limiting input rate in Express. Below code is a sample code for protecting against brute force attacks.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;const express = require('express')
const ExpressBrute = require('express-brute');
const login = require('./routes/login.js')

const app = express()
 
// using memory store, an in-memory db is recommended for production
let store = new ExpressBrute.MemoryStore();
let bruteforce = new ExpressBrute(store);
 
app.post('/auth', bruteforce.prevent, login);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you use an API gateway like Kong you can easily configure input limiting policies for your routes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: CAPTCHA and account lockout are also other common solutions for mitigating brute-forcing attacks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bonus&lt;/strong&gt;: You can also benefit from packages like &lt;a href=&quot;https://www.npmjs.com/package/toobusy-js&quot;&gt;toobusy-js&lt;/a&gt; for monitoring the load of your server to detect whether you’re under a DoS attack.&lt;/p&gt;

&lt;h2 id=&quot;remove-old-forgotten-debug-and-unused-routes&quot;&gt;Remove old, forgotten, debug, and unused routes&lt;/h2&gt;
&lt;p&gt;It’s common (but not recommended) to add debug routes during development for testing purposes. These routes usually don’t have authentication and they’re less restricted. The path to these routes is usually easy to guess; something like &lt;code&gt;/test&lt;/code&gt;. This allows attackers to find them easily and abuse the functionality.&lt;/p&gt;

&lt;p&gt;Review all the routes in your Express project and remove any unnecessary routes and use proper testing and versioning scheme to prevent unwanted routes in production.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bonus&lt;/strong&gt;: Another example of unwanted routes are default routes like those available in &lt;a href=&quot;https://sailsjs.com/&quot;&gt;Sails&lt;/a&gt; and &lt;a href=&quot;https://feathersjs.com/&quot;&gt;Feathers&lt;/a&gt;. Fortunately Express only has a default error and 404 handlers which we will cover in the following section.&lt;/p&gt;

&lt;h2 id=&quot;catch-404-and-500-errors&quot;&gt;Catch 404 and 500 errors&lt;/h2&gt;
&lt;p&gt;You should always expect exceptions to happen, so get prepared. Unhandled exceptions throw a ton of information to users. Default NodeJs exceptions disclose information like Operation System and used libraries.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/express-error.png&quot; width=&quot;1044&quot; height=&quot;298&quot; alt=&quot;Express JavaScript Detailed Error&quot; loading=&quot;lazy&quot; style=&quot;aspect-ratio: attr(width) / attr(height); height:auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Instead of displaying a &lt;a href=&quot;/vulnerability-list/detailed-application-error&quot;&gt;detailed error message&lt;/a&gt;, you can add an error-handling middleware to catch all errors like below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;app.use((err, req, res, next) =&amp;gt; {
 console.error(err.stack)
 res.status(500).send('Something broke!')
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You should add the above middleware after any other &lt;code&gt;app.use()&lt;/code&gt; and routes.
No need to mention that you can capture any exception in NodeJs by subscribing to &lt;code&gt;uncaughtException&lt;/code&gt; event on the &lt;code&gt;process&lt;/code&gt; object.&lt;/p&gt;

&lt;h2 id=&quot;write-clean-code&quot;&gt;Write clean code&lt;/h2&gt;
&lt;p&gt;Code quality is directly correlated to software security. Less code hides fewer vulnerabilities, right? So does the clean code. Keeping your Express project as clean as possible helps to increase the security of your JavaScript application.&lt;/p&gt;

&lt;p&gt;One example of bad code that is common in JavaScript projects is the &lt;em&gt;Callback Hell&lt;/em&gt;. Callback Hell, also known as &lt;em&gt;Pyramid of Doom&lt;/em&gt;, is an anti-pattern seen in code of asynchronous programming. It happens when callbacks are nested inside each other. It’s easy to get lost in a callback hell because it’s hard to follow the execution flow of the program. Inside those deep nested callbacks security bugs, unhandled exceptions, and information leakage are waiting for the right moment to strike.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/javascript-promise-hell.png&quot; width=&quot;896&quot; height=&quot;388&quot; alt=&quot;JavaScript Promise Hell Refactored&quot; loading=&quot;lazy&quot; style=&quot;aspect-ratio: attr(width) / attr(height); height:auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s important to have a proper Secure SDLC process in place to prevent bad code. Things like enabling security linters, code reviews, and automatic code scan like Github code scan (see this &lt;a href=&quot;https://github.com/github/code-scanning-javascript-demo&quot;&gt;repo&lt;/a&gt;) are good controls for having more secure code.&lt;/p&gt;

&lt;h2 id=&quot;only-return-what-is-necessary&quot;&gt;Only return what is necessary&lt;/h2&gt;
&lt;p&gt;When passing information to the clients always return the minimum possible fields. Consider a use-case where you want to show a list of available users on your website. You can query the database for all users and return a list of users with all their attributes and only display the username on the front end. Properties like username, password, address, social security numbers, and many others are usually associated with users. You might not display all of them on the page but you are exposing them in your API which makes them available for hackers.&lt;/p&gt;

&lt;h2 id=&quot;do-not-use-eval&quot;&gt;Do not use &lt;code&gt;eval&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;There are some functions you must avoid calling unless you absolutely have to use them. &lt;code&gt;eval()&lt;/code&gt; is one of them. The &lt;code&gt;eval()&lt;/code&gt; function evaluates JavaScript code represented as a string. It is far too easy for a bad actor to run arbitrary code when you use &lt;code&gt;eval()&lt;/code&gt; with user-supplied input. The NodeJs &lt;code&gt;child_process.exec&lt;/code&gt; is similar to &lt;code&gt;eval()&lt;/code&gt; and should be avoided.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;fs&lt;/code&gt; and &lt;code&gt;vm&lt;/code&gt; modules as well as the &lt;code&gt;RegExp&lt;/code&gt; class should be used carefully if you want to pass user input to them. Please read the &lt;a href=&quot;/blog/how-to-secure-your-nodejs-express-javascript-application-part-1#validate-input&quot;&gt;input validation&lt;/a&gt; on part 1 of this series for more.&lt;/p&gt;

&lt;h2 id=&quot;use-strict-mode&quot;&gt;Use &lt;code&gt;strict mode&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;JavaScript’s strict mode, introduced in ECMAScript 5, is a way to opt-in to a restricted variant of JavaScript. Strict mode makes several changes to normal JavaScript semantics. It eliminates some JavaScript silent errors by changing them to throw errors. It also helps JavaScript engines perform optimizations and prohibits some syntax likely to be defined in future versions of ECMAScript.
For all these improvements it’s encouraged to always use strict mode. For activating strict mode add &lt;code&gt;'strict mode';&lt;/code&gt; at top of your code.&lt;/p&gt;

&lt;h2 id=&quot;log-and-monitor-events&quot;&gt;Log and monitor events&lt;/h2&gt;
&lt;p&gt;Record any events on your application and review them. Monitoring logs regularly could help identify malicious activities on your system. When something bad happens, logs are your only way to find out what happened and what is the root cause of it.
In Express you can use &lt;a href=&quot;https://www.npmjs.com/package/express-winston&quot;&gt;express-winston&lt;/a&gt; for logging.&lt;/p&gt;</content><author><name></name></author><category term="Express" /><category term="NodeJs" /><category term="JavaScript" /><category term="npm" /><category term="Information Disclosure" /><category term="Brute Force" /><summary type="html">Express is an easy-to-use web framework for NodeJs. In this article, we will review some of the common vulnerabilities in NodeJs Express projects and explain mitigations against them.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.thesmartscanner.com/assets/img/eval.png" /><media:content medium="image" url="https://www.thesmartscanner.com/assets/img/eval.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">SmartScanner now has a 64-bit version for Windows</title><link href="https://www.thesmartscanner.com/blog/smartscanner-now-has-a-64-bit-version-for-windows" rel="alternate" type="text/html" title="SmartScanner now has a 64-bit version for Windows" /><published>2022-02-08T00:00:00+00:00</published><updated>2022-02-08T00:00:00+00:00</updated><id>https://www.thesmartscanner.com/blog/smartscanner-now-has-a-64-bit-version-for-windows-</id><content type="html" xml:base="https://www.thesmartscanner.com/blog/smartscanner-now-has-a-64-bit-version-for-windows">&lt;p&gt;SmartScanner version 1.12 is out with a new 64bit build. Of course, we didn’t forget to include new tests.&lt;/p&gt;

&lt;p&gt;Below are major changes in this release.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;New &lt;strong&gt;64bit&lt;/strong&gt; build along with the 32bit version&lt;/li&gt;
  &lt;li&gt;New tests, focusing on &lt;strong&gt;web server vulnerabilities&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;/vulnerability-list/crlf-injection-in-url&quot;&gt;CRLF Injection in URL&lt;/a&gt;&lt;/strong&gt;, that can occur because of misconfigurations in Nginx or other web servers&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;/vulnerability-list/nginx-code-execution-due-to-misconfiguration&quot;&gt;Nginx Code Execution due to Misconfiguration&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Nginx&lt;/strong&gt; &lt;a href=&quot;/vulnerability-list/nginx-integer-overflow&quot;&gt;CVE-2017-7529&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Django&lt;/strong&gt; &lt;a href=&quot;/vulnerability-list/open-redirection-in-url&quot;&gt;CVE-2018-14574&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;WordPress&lt;/strong&gt; &lt;a href=&quot;/vulnerability-list/wordpress-4-6-blind-os-command-execution&quot;&gt;CVE-2016-10033&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Now &lt;em&gt;Referer&lt;/em&gt; and &lt;em&gt;User-Agent&lt;/em&gt; headers are tested for XSS and other vulnerabilities by default. (You can disable it in the scan config)&lt;/li&gt;
  &lt;li&gt;A critical bug causing random crashes fixed.&lt;/li&gt;
  &lt;li&gt;Some false positives were removed and, many optimizations were done.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/download&quot;&gt;Download SmartScanner free&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Read the &lt;a href=&quot;/docs/changelog&quot;&gt;changelog&lt;/a&gt; for details of new changes.&lt;/p&gt;</content><author><name></name></author><category term="Release" /><summary type="html">SmartScanner version 1.12 is out with a new 64bit build. Of course, we didn’t forget to include new tests.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.thesmartscanner.com/assets/img/smartscanner-version-1-12.png" /><media:content medium="image" url="https://www.thesmartscanner.com/assets/img/smartscanner-version-1-12.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">How to Secure your NodeJs Express Javascript Application - part 1</title><link href="https://www.thesmartscanner.com/blog/how-to-secure-your-nodejs-express-javascript-application-part-1" rel="alternate" type="text/html" title="How to Secure your NodeJs Express Javascript Application - part 1" /><published>2021-12-29T00:00:00+00:00</published><updated>2021-12-29T00:00:00+00:00</updated><id>https://www.thesmartscanner.com/blog/how-to-secure-your-nodejs-express-javascript-application---part-1-</id><content type="html" xml:base="https://www.thesmartscanner.com/blog/how-to-secure-your-nodejs-express-javascript-application-part-1">&lt;p&gt;Express is a fast, unopinionated, and minimalist web framework for Node.js. It has been a de facto choice for creating a web-server application in Node.js. If you want to use Express in your application, you need to read this article.&lt;/p&gt;

&lt;p&gt;Read the second part of this series on the below URL.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://www.thesmartscanner.com/blog/how-to-secure-your-nodejs-express-javascript-application-part-2&quot;&gt;How to Secure your NodeJs Express Javascript Application - part 2&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s see how you can make Express more secure.&lt;/p&gt;

&lt;h2 id=&quot;use-updated-express-version-and-any-other-npm-package&quot;&gt;Use Updated Express Version (and any other npm package)&lt;/h2&gt;
&lt;p&gt;Old versions of Express have vulnerabilities like &lt;a href=&quot;https://www.thesmartscanner.com/vulnerability-list/web-server-path-traversal&quot;&gt;Path traversal (CVE-2017-14849)&lt;/a&gt;. The best practice is to use the latest stable packages to mitigate such vulnerabilities. You can use the &lt;code&gt;npm audit&lt;/code&gt; command to find out known vulnerabilities in your Nodejs application. Then you can fix them by running the &lt;code&gt;npm audit fix&lt;/code&gt; command. Make sure to get 0 vulnerabilities in the report of the npm audit command.&lt;/p&gt;

&lt;h2 id=&quot;secure-your-http-headers&quot;&gt;Secure your HTTP Headers&lt;/h2&gt;
&lt;p&gt;Proper HTTP headers can prevent security vulnerabilities like Cross-Site Scripting, Click-jacking, Packet sniffing and, information disclosure. It’s better not to use Express with its default HTTP headers.
Try the &lt;a href=&quot;https://www.npmjs.com/package/helmet&quot;&gt;Helmet&lt;/a&gt; npm package for hardening the HTTP headers of your Express project. Below is a sample code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Javascript&quot;&gt;const express = require(&quot;express&quot;);
const helmet = require(&quot;helmet&quot;);

const app = express();

app.use(helmet());

// ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Read the &lt;a href=&quot;https://www.thesmartscanner.com/blog/complete-guide-to-http-headers-for-securing-websites-cheat-sheet&quot;&gt;Complete guide to HTTP Headers&lt;/a&gt; for more detailed information about HTTP Headers security.&lt;/p&gt;

&lt;h2 id=&quot;validate-input&quot;&gt;Validate Input&lt;/h2&gt;
&lt;p&gt;Hackers should find a way into your application and, request parameters are their first choice. All the injection vulnerabilities like &lt;a href=&quot;https://www.thesmartscanner.com/vulnerability-list/sql-injection&quot;&gt;SQL Injection&lt;/a&gt;, &lt;a href=&quot;https://www.thesmartscanner.com/vulnerability-list/os-command-execution&quot;&gt;Command Injection&lt;/a&gt;, &lt;a href=&quot;https://www.thesmartscanner.com/vulnerability-list/expression-language-injection&quot;&gt;Expression Language injection&lt;/a&gt;, and many others occur when unvalidated user input is directly used in performing tasks.&lt;/p&gt;

&lt;p&gt;Consider below code which gets your name in the &lt;code&gt;name&lt;/code&gt; query parameter and displays it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Javascript&quot;&gt;const express = require('express')
const app = express()

app.get('/', function (request, response) {
 response.send('Hello ' + request.query.name)
})

app.listen(3000)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you send a request like &lt;code&gt;http://localhost:3000/?name[foo]=bar&lt;/code&gt; then you will receive an Object instead of a String name. This is an attack known as HTTP Parameter Pollution (HPP). It can be very scary when working with a no-SQL database like MongoDB.&lt;/p&gt;

&lt;p&gt;Before processing any &lt;code&gt;request&lt;/code&gt; parameter, validate the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Input type (either String, Number, Boolean, etc.)&lt;/li&gt;
  &lt;li&gt;Input boundaries: Check range for numbers, length, and acceptable characters for strings&lt;/li&gt;
  &lt;li&gt;Input format: Check for input patterns like emails, IP addresses, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can use &lt;a href=&quot;https://www.npmjs.com/package/hpp&quot;&gt;hpp&lt;/a&gt; npm package for preventing HPP attacks.&lt;/p&gt;

&lt;p&gt;Input validation is a broad topic. It can be very tricky especially dealing with rich user content. You can read &lt;a href=&quot;https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html&quot;&gt;this article&lt;/a&gt; for an in-depth review.&lt;/p&gt;

&lt;h2 id=&quot;sanitize-output&quot;&gt;Sanitize Output&lt;/h2&gt;
&lt;p&gt;Below sample code exposes a Cross-Site scripting (XSS) vulnerability.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Javascript&quot;&gt;const express = require('express')
const app = express()

app.get('/', function (request, response) {
 response.send('Hello ' + request.query.name)
})

app.listen(3000)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you run the application and open &lt;code&gt;http://localhost:2000/?name=&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&lt;/code&gt; URL, the &lt;code&gt;alert(1)&lt;/code&gt; JavaScript code will be executed. XSS bug allows an attacker to run any client-side code to steal session tokens, passwords or display wrong information.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/xss.png&quot; width=&quot;960&quot; height=&quot;320&quot; alt=&quot;Cross-Side Scripting Vulnerability&quot; loading=&quot;lazy&quot; style=&quot;aspect-ratio: attr(width) / attr(height); height:auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To prevent the XSS you have to use proper encoding before rendering input parameters in the response. You can use &lt;a href=&quot;https://github.com/ESAPI/node-esapi&quot;&gt;node-esapi&lt;/a&gt; or &lt;a href=&quot;https://github.com/component/escape-html&quot;&gt;escape-html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Below code is a fix for the above XSS:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Javascript&quot;&gt;const express = require('express')
var ESAPI = require('node-esapi');
const app = express()

app.get('/', function (request, response) {
 encodedName = ESAPI.encoder().encodeForHTML(request.query.name)
 response.send('Hello ' + encodedName)
})

app.listen(3000)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;use-anti-csrf&quot;&gt;Use Anti CSRF&lt;/h2&gt;
&lt;p&gt;Processing form data and performing actions only by relying on the form data will cause a Cross-Site Request Forgery (CSRF).
If the same request data (either form data or URL query) causes the same action on your application then you have a CSRF issue. It gets serious when the action is sensitive like, creating a new user or deleting data.&lt;/p&gt;

&lt;p&gt;Attackers use CSRF to perform actions on behalf of an authorized user while the user is unaware of this action. Below sample code is an example that kills the app by a CSRF.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Javascript&quot;&gt;const express = require('express')
const app = express()

app.get('/', function (request, response) {
 response.send('&amp;lt;h1&amp;gt;Admin Panel&amp;lt;/h1&amp;gt;&amp;lt;a href=/kill&amp;gt;kill&amp;lt;/a&amp;gt;')
})

app.get('/kill', function (request, response) {
 process.exit()
})

app.listen(2000)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You might wonder that adding cookie-based session management cannot prevent CSRF because Cookies are automatically sent by browsers. To prevent CSRF you should send random tokens within each request and validate the existence of the CSRF token before processing the request.&lt;/p&gt;

&lt;p&gt;You can use the &lt;a href=&quot;https://www.npmjs.com/package/csurf&quot;&gt;csurf&lt;/a&gt; npm package for integrating CSRF prevention in your Express application.&lt;/p&gt;

&lt;p&gt;In next article we will see how to prevent brute force attacks, command execution and information disclosure vulnerabilities.&lt;/p&gt;</content><author><name></name></author><category term="Express" /><category term="NodeJs" /><category term="JavaScript" /><category term="npm" /><category term="HTTP Headers" /><category term="XSS" /><category term="HPP" /><category term="CSRF" /><summary type="html">Express is a fast, unopinionated, and minimalist web framework for Node.js. It has been a de facto choice for creating a web-server application in Node.js. If you want to use Express in your application, you need to read this article.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.thesmartscanner.com/assets/img/express-security.png" /><media:content medium="image" url="https://www.thesmartscanner.com/assets/img/express-security.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Host Header Injection and Python Tests with SmartScanner 1.11</title><link href="https://www.thesmartscanner.com/blog/host-header-injection-and-python-tests-with-smartscanner-1-11" rel="alternate" type="text/html" title="Host Header Injection and Python Tests with SmartScanner 1.11" /><published>2021-12-12T00:00:00+00:00</published><updated>2021-12-12T00:00:00+00:00</updated><id>https://www.thesmartscanner.com/blog/host-header-injection-and-python-tests-with-smartscanner-1-11-</id><content type="html" xml:base="https://www.thesmartscanner.com/blog/host-header-injection-and-python-tests-with-smartscanner-1-11">&lt;p&gt;SmartScanner version 1.11 &lt;a href=&quot;/download&quot;&gt;was released&lt;/a&gt; with new tests like Host Header Injection.&lt;/p&gt;

&lt;p&gt;Below are the change highlights in this version:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;/vulnerability-list/host-header-injection&quot;&gt;Host Header Injection&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;/vulnerability-list/insecure-deserialization&quot;&gt;Insecure Deserialization&lt;/a&gt;&lt;/strong&gt; test for JSON objects, which &lt;a href=&quot;/blog/apache-and-express-path-traversal-plus-nginx-restriction-bypass-tests-with-smartscanner&quot;&gt;was added&lt;/a&gt; in version 1.10 updated with support for Java and PHP objects.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;/vulnerability-list/wordpress-plugin-wpfilemanager-6-8-rce&quot;&gt;WordPress Plugin Wpfilemanager 6.8 RCE&lt;/a&gt;&lt;/strong&gt;, which is listed with CVE-2020-25213 in &lt;a href=&quot;https://www.cisa.gov/known-exploited-vulnerabilities-catalog&quot;&gt;Known Exploited Vulnerabilities Catalog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;/vulnerability-list/drupal7-pre-auth-sqli&quot;&gt;Drupal7 Pre Auth SQLI (CVE-2014-3704)&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;/vulnerability-list/apache-mod-proxy-2-4-48-ssrf&quot;&gt;Apache mod_proxy 2.4.48 SSRF (CVE-2021-40438)&lt;/a&gt;&lt;/strong&gt;, listed &lt;a href=&quot;https://www.cisa.gov/known-exploited-vulnerabilities-catalog&quot;&gt;Known Exploited Vulnerabilities Catalog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Support for using &lt;strong&gt;the system’s proxy&lt;/strong&gt; in the scan configurations&lt;/li&gt;
  &lt;li&gt;Support for detection of &lt;strong&gt;errors in Python&lt;/strong&gt; libraries like Django, Flask, and &lt;a href=&quot;/vulnerability-list/werkzeug-interactive-debugging-is-active&quot;&gt;Werkzeug&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Vulnerability assessment&lt;/strong&gt; for outdated &lt;a href=&quot;/vulnerability-list/vulnerable-php-version&quot;&gt;PHP&lt;/a&gt;, and &lt;a href=&quot;/vulnerability-list/vulnerable-wordpress-version&quot;&gt;WordPress&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/download&quot;&gt;Download SmartScanner free&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out all changes in the &lt;a href=&quot;/docs/changelog&quot;&gt;changelog&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="Release" /><summary type="html">SmartScanner version 1.11 was released with new tests like Host Header Injection.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.thesmartscanner.com/assets/img/smarscanner-v1-11.png" /><media:content medium="image" url="https://www.thesmartscanner.com/assets/img/smarscanner-v1-11.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">5 Security Vulnerabilities You Can Fix Right Now</title><link href="https://www.thesmartscanner.com/blog/5-security-vulnerabilities-you-can-fix-right-now" rel="alternate" type="text/html" title="5 Security Vulnerabilities You Can Fix Right Now" /><published>2021-11-03T00:00:00+00:00</published><updated>2021-11-03T00:00:00+00:00</updated><id>https://www.thesmartscanner.com/blog/5-security-vulnerabilities-you-can-fix-right-now</id><content type="html" xml:base="https://www.thesmartscanner.com/blog/5-security-vulnerabilities-you-can-fix-right-now">&lt;p&gt;We usually think security and hacking are complicated—at least it’s super geeky in movies—but you will be surprised to see how easy you can fix some security problems even without programming knowledge. Let’s review and fix them right away.&lt;/p&gt;

&lt;h2 id=&quot;weak-password&quot;&gt;Weak Password&lt;/h2&gt;
&lt;p&gt;Do you use &lt;code&gt;123456&lt;/code&gt; to login into your website? Change it now! Easy passwords can be guessed and cracked in minutes.
You should use strong and unique passwords for any of your accounts. To have a strong password, always use a long, hard to guess &lt;a href=&quot;https://en.wikipedia.org/wiki/Passphrase&quot;&gt;passphrase&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;outdated-application&quot;&gt;Outdated Application&lt;/h2&gt;
&lt;p&gt;Outdated applications are like open doors for hackers to break in. Hackers search the whole Internet for outdated applications of any kind (web server, CMS, router, etc.). If you’re using outdated software, you’ve already become a target for hackers.
Modern applications like WordPress and Joomla! provide one-click auto-update features to make our life much easier. If your site is one of them, login into your administration panel and check for available updates.&lt;/p&gt;

&lt;h2 id=&quot;directory-listing&quot;&gt;Directory listing&lt;/h2&gt;
&lt;p&gt;Does your website display a list of files and folders when the URL ends with a slash (&lt;code&gt;/&lt;/code&gt;)? If yes, you have a &lt;a href=&quot;/vulnerability-list/directory-listing&quot;&gt;directory listing issue&lt;/a&gt; you need to fix.&lt;/p&gt;

&lt;p&gt;A universal and easy fix for this issue is to login into your website hosting panel and create an empty file named &lt;code&gt;index.html&lt;/code&gt; inside every directory that doesn’t have one. Try not to override files to prevent unwanted damages to your website.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; It’s better to ask your web hosting provider for the specific instructions for your website to have a permanent fix for the directory listing problem.&lt;/p&gt;

&lt;h2 id=&quot;hidden-pages-or-functionalities&quot;&gt;Hidden Pages or Functionalities&lt;/h2&gt;
&lt;p&gt;Let’s say you have a &lt;em&gt;secret&lt;/em&gt; page on your website that you’re the only one who knows its URL. If you believe no other one can access it because they don’t know the URL, you’re wrong!
Obscuring a resource does not make it secure. Because hackers can find hidden pages by trying many different URLs. Furthermore, the &lt;em&gt;secret&lt;/em&gt; URL you access will be reported and recorded in many places like web server logs and referrer headers where others can see it.&lt;/p&gt;

&lt;p&gt;Common example of hidden pages are debug pages like &lt;a href=&quot;/vulnerability-list/phpinfo-found&quot;&gt;phpInfo()&lt;/a&gt;, beta versions, hidden administration pages and pre-production features.
Immediately delete such pages from your website or use password protection for them.&lt;/p&gt;

&lt;h2 id=&quot;backup-files&quot;&gt;Backup files&lt;/h2&gt;
&lt;p&gt;Taking regular backups is a must. But leaving backup files under the web directory where they are accessible over the Internet, is a bad habit you have to quit.
Backups contain source code and config files that can reveal secrets like the source codes, password of your database and protected directories.&lt;/p&gt;

&lt;p&gt;Common backup formats are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Compressed files like &lt;code&gt;.rar&lt;/code&gt;, &lt;code&gt;.zip&lt;/code&gt;, &lt;code&gt;.gz&lt;/code&gt; and &lt;code&gt;.tar&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;.bak&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;.tmp&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;.gho&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;.001&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;.bac&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Search for the above file types in your web hosting panel and make sure they are not publicly accessible over the web.
Also, If you use a compressed file for transferring resources to your web hosting, do not forget to remove the compressed archive after extracting files.&lt;/p&gt;

&lt;h2 id=&quot;bonus-always-use-https&quot;&gt;Bonus: Always use HTTP&lt;strong&gt;S&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Do you still use &lt;code&gt;http://&lt;/code&gt; (without S) for viewing your website in the browser? The HTTP protocol transfers everything in plain text. That means anyone between your system and the target website can see everything, as well as your password!&lt;/p&gt;

&lt;p&gt;Next time you want to access any web page, always use the &lt;code&gt;httpS://&lt;/code&gt; instead of &lt;code&gt;http://&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We didn’t cover many other vulnerabilities that require time and technical skills to fix. To keep your site safe and protected, always use up-to-date applications and regularly &lt;a href=&quot;/&quot;&gt;scan for vulnerabilities&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Do you know any other easy-to-fix issues to add? &lt;a href=&quot;https://twitter.com/intent/tweet?text=%23DIY_Security%20%23SmartScanner&quot;&gt;share it&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="Brute Force" /><category term="Information Disclosure" /><category term="Vulnerability" /><category term="Password" /><summary type="html">We usually think security and hacking are complicated—at least it’s super geeky in movies—but you will be surprised to see how easy you can fix some security problems even without programming knowledge. Let’s review and fix them right away.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.thesmartscanner.com/assets/img/diy-security.webp" /><media:content medium="image" url="https://www.thesmartscanner.com/assets/img/diy-security.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Apache and Express Path Traversal plus Nginx Restriction Bypass Tests with SmartScanner</title><link href="https://www.thesmartscanner.com/blog/apache-and-express-path-traversal-plus-nginx-restriction-bypass-tests-with-smartscanner" rel="alternate" type="text/html" title="Apache and Express Path Traversal plus Nginx Restriction Bypass Tests with SmartScanner" /><published>2021-10-10T00:00:00+00:00</published><updated>2021-10-10T00:00:00+00:00</updated><id>https://www.thesmartscanner.com/blog/apache-and-express-path-traversal-plus-nginx-restriction-bypass-tests-with-smartscanner-</id><content type="html" xml:base="https://www.thesmartscanner.com/blog/apache-and-express-path-traversal-plus-nginx-restriction-bypass-tests-with-smartscanner">&lt;p&gt;Today, we’re excited to announce that SmartScanner 1.10 is available for &lt;a href=&quot;/download&quot;&gt;download&lt;/a&gt;. This release brings 15 new CVEs and tests to improve vulnerability assessment quality and new security testing capabilities to our customers. You can find all changes in the &lt;a href=&quot;/docs/changelog&quot;&gt;changelog&lt;/a&gt;, but here are top highlights from the release:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;All issues mapped to &lt;strong&gt;OWASP Top 10 2021&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;/vulnerability-list/insecure-deserialization&quot;&gt;Insecure Deserialization&lt;/a&gt;&lt;/strong&gt; tests for JSON objects. Other objects like PHP serialized objects will be added in future versions.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;/vulnerability-list/apache-2-4-49-path-traversal-and-rce&quot;&gt;Apache 2.4.49 Path Traversal and RCE (CVE-2021-41773, CVE-2021-42013)&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;/vulnerability-list/nginx-restriction-bypass-via-space-character-in-uri&quot;&gt;Nginx Restriction Bypass via Space Character in URI (CVE-2013-4547)&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;/vulnerability-list/web-server-path-traversal&quot;&gt;Web Server Path Traversal (CVE-2017-14849)&lt;/a&gt;&lt;/strong&gt; for Express and other static file routers&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;/vulnerability-list/cookie-accessible-for-subdomains&quot;&gt;Cookie Accessible for Subdomains&lt;/a&gt;&lt;/strong&gt; in passive tests&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Vulnerability assessment&lt;/strong&gt; for outdated &lt;a href=&quot;/vulnerability-list/vulnerable-openssl-version&quot;&gt;OpenSSL&lt;/a&gt;, &lt;a href=&quot;/vulnerability-list/vulnerable-apache-version&quot;&gt;Apache&lt;/a&gt;, &lt;a href=&quot;/vulnerability-list/vulnerable-php-version&quot;&gt;PHP&lt;/a&gt;, and &lt;a href=&quot;/vulnerability-list/vulnerable-wordpress-version&quot;&gt;WordPress&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/download&quot;&gt;Download SmartScanner free&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="Apache" /><category term="Express" /><category term="Path Traversal" /><category term="Nginx" /><category term="CVE" /><category term="Release" /><category term="Web Server" /><category term="Deserialization" /><category term="Cookie" /><summary type="html">15 new CVEs for Apache, Nginx, OpenSSL, and Express included in version 1.10 of SmartScanner. Download it now!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.thesmartscanner.com/assets/img/smarscanner-v1-10-path-traversal.webp" /><media:content medium="image" url="https://www.thesmartscanner.com/assets/img/smarscanner-v1-10-path-traversal.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Complete guide to HTTP Headers for securing websites (Cheat Sheet)</title><link href="https://www.thesmartscanner.com/blog/complete-guide-to-http-headers-for-securing-websites-cheat-sheet" rel="alternate" type="text/html" title="Complete guide to HTTP Headers for securing websites (Cheat Sheet)" /><published>2021-09-23T00:00:00+00:00</published><updated>2021-09-23T00:00:00+00:00</updated><id>https://www.thesmartscanner.com/blog/complete-guide-to-http-headers-for-securing-websites-cheat-sheet-</id><content type="html" xml:base="https://www.thesmartscanner.com/blog/complete-guide-to-http-headers-for-securing-websites-cheat-sheet">&lt;p&gt;HTTP Headers are a great booster for web security with easy implementation. Proper HTTP headers can prevent security vulnerabilities like Cross-Site Scripting, Click-jacking, Packet sniffing and, information disclosure.&lt;/p&gt;

&lt;p&gt;In this article, we’ll take a quick look at all security-related HTTP headers and the recommended configurations. Below are the main sections of this document.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#security-headers&quot;&gt;Security headers list&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#adding-http-headers-in-different-technologies&quot;&gt;Implementation of HTTP headers in Nginx, Apache, PHP, etc.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#testing-proper-implementation-of-security-headers&quot;&gt;Testing of HTTP headers in your website&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#references&quot;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The source for this document is available on &lt;a href=&quot;https://github.com/TheSmartScanner/http-headers-security&quot;&gt;GitHub&lt;/a&gt;. Your contributions are most welcome to complete it and keep it updated 👐&lt;/p&gt;

&lt;h2 id=&quot;security-headers&quot;&gt;Security Headers&lt;/h2&gt;

&lt;h3 id=&quot;x-frame-options&quot;&gt;X-Frame-Options&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;X-Frame-Options&lt;/code&gt; HTTP response header can be used to indicate whether or not a browser should be allowed to render a page in a &lt;code&gt;&amp;lt;frame&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;embed&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt;. Sites can use this to avoid click-jacking attacks, by ensuring that their content is not embedded into other sites.&lt;/p&gt;

&lt;h4 id=&quot;recommendation&quot;&gt;Recommendation&lt;/h4&gt;
&lt;p&gt;Do not allow displaying of the page in a frame.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;X-Frame-Options: DENY&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;x-xss-protection&quot;&gt;X-XSS-Protection&lt;/h3&gt;
&lt;p&gt;The HTTP &lt;code&gt;X-XSS-Protection&lt;/code&gt; response header is a feature of Internet Explorer, Chrome, and Safari that stops pages from loading when they detect reflected cross-site scripting (XSS) attacks.&lt;/p&gt;

&lt;h4 id=&quot;recommendation-1&quot;&gt;Recommendation&lt;/h4&gt;
&lt;p&gt;Do not set this header or explicitly turn it off.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;X-XSS-Protection: 0&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Please read &lt;a href=&quot;https://github.com/OWASP/CheatSheetSeries/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md#x-xss-protection-header&quot;&gt;X-XSS_Protection should be disabled&lt;/a&gt; for details.&lt;/p&gt;

&lt;h3 id=&quot;x-content-type-options&quot;&gt;X-Content-Type-Options&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;X-Content-Type-Options&lt;/code&gt; response HTTP header is used by the server to prevent browsers from guessing the media type ( MIME type).
This is known as &lt;strong&gt;MIME sniffing&lt;/strong&gt; in which the browser guesses the correct MIME type by looking at the contents of the resource.
The absence of this header might cause browsers to transform non-executable content into executable content.&lt;/p&gt;

&lt;h4 id=&quot;recommendation-2&quot;&gt;Recommendation&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;X-Content-Type-Options: nosniff&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;referrer-policy&quot;&gt;Referrer-Policy&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;Referrer-Policy&lt;/code&gt; HTTP header controls how much referrer information (sent via the Referer header) should be included with requests.&lt;/p&gt;

&lt;h4 id=&quot;recommendation-3&quot;&gt;Recommendation&lt;/h4&gt;
&lt;p&gt;Send everything to the same site but only the origin for other sites.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;Referrer-Policy: strict-origin-when-cross-origin&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;NOTE:&lt;/em&gt; This is the default in modern browsers&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;content-type&quot;&gt;Content-Type&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;Content-Type&lt;/code&gt; representation header is used to indicate the original media type of the resource (before any content encoding is applied for sending).&lt;/p&gt;

&lt;h4 id=&quot;recommendation-4&quot;&gt;Recommendation&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;Content-Type: text/html; charset=UTF-8&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;NOTE:&lt;/em&gt; the &lt;code&gt;charset&lt;/code&gt; attribute is necessary to prevent XSS in &lt;strong&gt;HTML&lt;/strong&gt; pages&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;NOTE&lt;/em&gt;: the &lt;code&gt;text/html&lt;/code&gt; can be any of the possible &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types&quot;&gt;MIME types&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;set-cookie&quot;&gt;Set-Cookie&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;Set-Cookie&lt;/code&gt; HTTP response header is used to send a cookie from the server to the user agent, so the user agent can send it back to the server later. To send multiple cookies, multiple Set-Cookie headers should be sent in the same response.&lt;/p&gt;

&lt;h4 id=&quot;recommendation-5&quot;&gt;Recommendation&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;Set-Cookie: name=value; Secure; HttpOnly; SameSite=Strict&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;NOTE:&lt;/em&gt; The &lt;code&gt;Domain&lt;/code&gt; attribute has been removed intentionally&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;strict-transport-security&quot;&gt;Strict-Transport-Security&lt;/h3&gt;
&lt;p&gt;The HTTP &lt;code&gt;Strict-Transport-Security&lt;/code&gt; response header (often abbreviated as HSTS) lets a website tell browsers that it should only be accessed using HTTPS, instead of using HTTP.&lt;/p&gt;

&lt;h4 id=&quot;recommendation-6&quot;&gt;Recommendation&lt;/h4&gt;
&lt;p&gt;Enable HTTPS-only access for the site and sub domains.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;Strict-Transport-Security: max-age=63072000; includeSubDomains; preload&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;expect-ct&quot;&gt;Expect-CT&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;Expect-CT&lt;/code&gt; header lets sites opt-in to reporting of Certificate Transparency (CT) requirements. Given that mainstream clients now require CT qualification, the only remaining value is reporting such occurrences to the nominated report-uri value in the header. The header is now less about enforcement and more about detection/reporting.&lt;/p&gt;

&lt;h4 id=&quot;recommendation-7&quot;&gt;Recommendation&lt;/h4&gt;
&lt;p&gt;Set Certificate Transparency so user agents report Expect-CT failures.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;Expect-CT: max-age=604800, report-uri=&quot;https://foo.example/report&quot;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;content-security-policy&quot;&gt;Content-Security-Policy&lt;/h3&gt;
&lt;p&gt;Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross-Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement to distribution of malware.&lt;/p&gt;

&lt;h4 id=&quot;recommendation-8&quot;&gt;Recommendation&lt;/h4&gt;
&lt;p&gt;Restrict most of the resource types to the same site and subdomains of &lt;code&gt;yourdoamin.com&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;Content-Security-Policy: default-src 'self' *.yourdomain.com; block-all-mixed-content; font-src 'self' https: data:; img-src 'self' data: blob:; object-src 'none'; script-src-attr 'none'; style-src 'self' https: 'unsafe-inline'; upgrade-insecure-requests;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;WARNING&lt;/em&gt;: Inline &lt;code&gt;script&lt;/code&gt; elements and inline script event handlers like &lt;code&gt;onload&lt;/code&gt; will stop working with the above header. But this is required to neutralize XSS attacks.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;access-control-allow-origin&quot;&gt;Access-Control-Allow-Origin&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; response header indicates whether the response can be shared with requesting code from the given origin.&lt;/p&gt;

&lt;h4 id=&quot;recommendation-9&quot;&gt;Recommendation&lt;/h4&gt;
&lt;p&gt;Use &lt;code&gt;*&lt;/code&gt; or specific domain names.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;Access-Control-Allow-Origin: *&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;cross-origin-opener-policy&quot;&gt;Cross-Origin-Opener-Policy&lt;/h3&gt;
&lt;p&gt;The HTTP &lt;code&gt;Cross-Origin-Opener-Policy&lt;/code&gt; (COOP) response header allows you to ensure a top-level document does not share a browsing context group with cross-origin documents.&lt;/p&gt;

&lt;h4 id=&quot;recommendation-10&quot;&gt;Recommendation&lt;/h4&gt;
&lt;p&gt;Isolates the browsing context exclusively to same-origin documents.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;HTTP Cross-Origin-Opener-Policy: same-origin&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;cross-origin-resource-policy&quot;&gt;Cross-Origin-Resource-Policy&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;Cross-Origin-Resource-Policy&lt;/code&gt; (CORP) header allows you to control the set of origins that are empowered to include a resource. It is a robust defense against attacks like &lt;a href=&quot;https://meltdownattack.com/&quot;&gt;Spectre&lt;/a&gt;, as it allows browsers to block a given response before it enters an attacker’s process.&lt;/p&gt;

&lt;h4 id=&quot;recommendation-11&quot;&gt;Recommendation&lt;/h4&gt;
&lt;p&gt;Limit current resource loading to the site and sub-domains only.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;Cross-Origin-Resource-Policy: same-site&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;cross-origin-embedder-policy&quot;&gt;Cross-Origin-Embedder-Policy&lt;/h3&gt;
&lt;p&gt;The HTTP &lt;code&gt;Cross-Origin-Embedder-Policy&lt;/code&gt; (COEP) response header prevents a document from loading any cross-origin resources that don’t explicitly grant the document permission (using &lt;a href=&quot;#cross-origin-resource-policy&quot;&gt;CORP&lt;/a&gt; or CORS).&lt;/p&gt;

&lt;h4 id=&quot;recommendation-12&quot;&gt;Recommendation&lt;/h4&gt;
&lt;p&gt;A document can only load resources from the same origin, or resources explicitly marked as loadable from another origin.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;Cross-Origin-Embedder-Policy: require-corp&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;NOTE&lt;/em&gt;: you can bypass it by adding the &lt;code&gt;crossorigin&lt;/code&gt; attribute like below:&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;&amp;lt;img src=&quot;https://thirdparty.com/img.png&quot; crossorigin&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;server&quot;&gt;Server&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;Server&lt;/code&gt; header describes the software used by the origin server that handled the request — that is, the server that generated the response.&lt;/p&gt;

&lt;h4 id=&quot;recommendation-13&quot;&gt;Recommendation&lt;/h4&gt;
&lt;p&gt;Remove this header or set non-informative values.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;Server: webserver&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;x-powered-by&quot;&gt;X-Powered-By&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;X-Powered-By&lt;/code&gt; header describes the technologies used by the webserver. This information exposes the server to attackers. Using the information in this header, attackers can find vulnerabilities easier.&lt;/p&gt;

&lt;h4 id=&quot;recommendation-14&quot;&gt;Recommendation&lt;/h4&gt;
&lt;p&gt;Remove all &lt;code&gt;X-Powered-By&lt;/code&gt; headers.&lt;/p&gt;

&lt;h3 id=&quot;x-aspnet-version&quot;&gt;X-AspNet-Version&lt;/h3&gt;
&lt;p&gt;Provides information about the .NET version.&lt;/p&gt;

&lt;h4 id=&quot;recommendation-15&quot;&gt;Recommendation&lt;/h4&gt;
&lt;p&gt;Disable sending this header. Review the &lt;a href=&quot;https://www.thesmartscanner.com/vulnerability-list/asp-net-version-disclosure&quot;&gt;ASP.NET Version Disclosure&lt;/a&gt; issue for details.&lt;/p&gt;

&lt;h3 id=&quot;x-aspnetmvc-version&quot;&gt;X-AspNetMvc-Version&lt;/h3&gt;
&lt;p&gt;Provides information about the .NET version.&lt;/p&gt;

&lt;h4 id=&quot;recommendation-16&quot;&gt;Recommendation&lt;/h4&gt;
&lt;p&gt;Disable sending this header. Review the &lt;a href=&quot;https://www.thesmartscanner.com/vulnerability-list/asp-net-version-disclosure&quot;&gt;ASP.NET Version Disclosure&lt;/a&gt; issue for details.&lt;/p&gt;

&lt;h3 id=&quot;x-dns-prefetch-control&quot;&gt;X-DNS-Prefetch-Control&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;X-DNS-Prefetch-Control&lt;/code&gt; HTTP response header controls DNS prefetching, a feature by which browsers proactively perform domain name resolution on both links that the user may choose to follow as well as URLs for items referenced by the document, including images, CSS, JavaScript, and so forth.&lt;/p&gt;

&lt;h4 id=&quot;recommendation-17&quot;&gt;Recommendation&lt;/h4&gt;
&lt;p&gt;The default behavior of browsers is to perform DNS caching which is good for most websites.
If you do not control links on your website, you might want to set &lt;code&gt;off&lt;/code&gt; as a value to disable DNS prefetch to avoid leaking information to those domains.&lt;/p&gt;

&lt;h3 id=&quot;public-key-pins-&quot;&gt;Public-Key-Pins ❌&lt;/h3&gt;
&lt;p&gt;The HTTP &lt;code&gt;Public-Key-Pins&lt;/code&gt; response header is used to associate a specific cryptographic public key with a certain web server to decrease the risk of MITM attacks with forged certificates.&lt;/p&gt;

&lt;h4 id=&quot;recommendation-18&quot;&gt;Recommendation&lt;/h4&gt;
&lt;p&gt;This header is deprecated. Use &lt;code&gt;Expect-CT&lt;/code&gt; instead.&lt;/p&gt;

&lt;h2 id=&quot;adding-http-headers-in-different-technologies&quot;&gt;Adding Http Headers in Different Technologies&lt;/h2&gt;
&lt;h3 id=&quot;php&quot;&gt;PHP&lt;/h3&gt;
&lt;p&gt;Below sample code sets the &lt;code&gt;X-XSS-Protection&lt;/code&gt; header in PHP.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;header(&quot;X-XSS-Protection: 1; mode=block&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;apache&quot;&gt;Apache&lt;/h3&gt;
&lt;p&gt;Below &lt;code&gt;.htaccess&lt;/code&gt; sample configuration sets the &lt;code&gt;X-XSS-Protection&lt;/code&gt; header in Apache.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;IfModule mod_headers.c&amp;gt;
Header set X-XSS-Protection &quot;1; mode=block&quot;
&amp;lt;/IfModule&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;iis&quot;&gt;IIS&lt;/h3&gt;
&lt;p&gt;Add below configurations to your &lt;code&gt;Web.config&lt;/code&gt; in ISS to send the &lt;code&gt;X-XSS-Protection&lt;/code&gt; header&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;system.webServer&amp;gt;
...
 &amp;lt;httpProtocol&amp;gt;
   &amp;lt;customHeaders&amp;gt;
     &amp;lt;add name=&quot;X-XSS-Protection&quot; value=&quot;1; mode=block&quot; /&amp;gt;
   &amp;lt;/customHeaders&amp;gt;
 &amp;lt;/httpProtocol&amp;gt;
...
&amp;lt;/system.webServer&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;haproxy&quot;&gt;HAProxy&lt;/h3&gt;
&lt;p&gt;Add the below line to your font-end, listen, or backend configurations to send the &lt;code&gt;X-XSS-Protection&lt;/code&gt; header&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http-response set-header X-XSS-Protection 1; mode=block
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;nginx&quot;&gt;Nginx&lt;/h3&gt;
&lt;p&gt;Below sample configuration, sets the &lt;code&gt;X-XSS-Protection&lt;/code&gt; header in Nginx.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;add_header &quot;X-XSS-Protection&quot; &quot;1; mode=block&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;express&quot;&gt;Express&lt;/h3&gt;
&lt;p&gt;You can use &lt;a href=&quot;https://www.npmjs.com/package/helmet&quot;&gt;helmet&lt;/a&gt; to setup HTTP headers in Express. Below code is sample for adding the &lt;code&gt;X-Frame-Options&lt;/code&gt; header.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const helmet = require('helmet');
const app = express();
// Sets &quot;X-Frame-Options: SAMEORIGIN&quot;
app.use(
 helmet.frameguard({
   action: &quot;sameorigin&quot;,
 })
);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;testing-proper-implementation-of-security-headers&quot;&gt;Testing Proper Implementation of Security Headers&lt;/h2&gt;
&lt;h3 id=&quot;mozilla-observatory&quot;&gt;Mozilla Observatory&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;https://observatory.mozilla.org/&quot;&gt;Mozilla Observatory&lt;/a&gt; is an online tool that you can check your website’s header status.&lt;/p&gt;

&lt;h3 id=&quot;smartscanner&quot;&gt;SmartScanner&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.thesmartscanner.com/&quot;&gt;SmartScanner&lt;/a&gt; has a dedicated &lt;a href=&quot;/docs/configuring-security-tests&quot;&gt;test profile&lt;/a&gt; for testing security of HTTP headers.
Online tools usually test the homepage of the given address. But SmartScanner scans the whole website. So, you can make sure all of your web pages have the right HTTP Headers in place.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/smartscanner-testing-security-http-headers.gif&quot; width=&quot;768&quot; height=&quot;466&quot; alt=&quot;Testing HTTP Security Headers using SmartScanner&quot; loading=&quot;lazy&quot; style=&quot;aspect-ratio: attr(width) / attr(height); height:auto;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options&quot;&gt;Mozilla: X-Frame-Options&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection&quot;&gt;Mozilla: X-XSS-Protection&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hstspreload.org/&quot;&gt;hstspreload.org&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security&quot;&gt;Mozilla: Strict-Transport-Security&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type&quot;&gt;Mozilla: Content-Type&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expect-CT&quot;&gt;Mozilla: Expect-CT&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy&quot;&gt;Mozilla: Referrer-Policy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie&quot;&gt;Mozilla: Set-Cookie&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://content-security-policy.com/&quot;&gt;content-security-policy.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin&quot;&gt;Mozilla: Access-Control-Allow-Origin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy&quot;&gt;Mozilla: Cross-Origin-Opener-Policy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://resourcepolicy.fyi/&quot;&gt;resourcepolicy.fyi&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Resource-Policy&quot;&gt;Mozilla: Cross-Origin-Resource-Policy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy&quot;&gt;Mozilla: Cross-Origin-Embedder-Policy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Server&quot;&gt;Mozilla: Server Header&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="HTTP Headers" /><category term="CWE-1021" /><category term="Information Disclosure" /><category term="Misconfiguration" /><category term="CWE-200" /><category term="XSS" /><category term="Click-jacking" /><category term="OWASP 2007-A6" /><category term="OWASP 2017-A6" /><category term="CWE-16" /><category term="PHP" /><category term="ASP.NET" /><category term="Nginx" /><category term="IIS" /><category term="Apache" /><category term="Express" /><category term="Passive" /><category term="Web Server" /><category term="Spectre" /><summary type="html">HTTP Headers are a great booster for web security with easy implementation. Proper HTTP headers can prevent security vulnerabilities like Cross-Site Scripting, Click-jacking, Packet sniffing and, information disclosure.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.thesmartscanner.com/assets/img/http-headers.webp" /><media:content medium="image" url="https://www.thesmartscanner.com/assets/img/http-headers.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">SmartScanner v1.9 as Joomla! Security Scanner</title><link href="https://www.thesmartscanner.com/blog/smartscanner-v1-9-as-joomla-security-scanner" rel="alternate" type="text/html" title="SmartScanner v1.9 as Joomla! Security Scanner" /><published>2021-09-05T00:00:00+00:00</published><updated>2021-09-05T00:00:00+00:00</updated><id>https://www.thesmartscanner.com/blog/smartscanner-v1-9-as-joomla-security-scanner-</id><content type="html" xml:base="https://www.thesmartscanner.com/blog/smartscanner-v1-9-as-joomla-security-scanner">&lt;p&gt;SmartScanner version 1.9 was released with 22 new tests for Joomla!&lt;sup&gt;®&lt;/sup&gt; and test counts are going to go up!&lt;/p&gt;

&lt;p&gt;Tests include &lt;a href=&quot;/vulnerability-list/os-command-execution&quot;&gt;Remote Command Execution&lt;/a&gt;, &lt;a href=&quot;/vulnerability-list/cross-site-scripting&quot;&gt;Cross-Site Scripting&lt;/a&gt;, and &lt;a href=&quot;/vulnerability-list/sql-injection&quot;&gt;SQL Injection&lt;/a&gt; in Joomla! core and popular components. To test any Joomla! website against these vulnerabilities, you just need to enter the website URL and click the scan button. SmartScanner automatically detects Joomla! and runs related tests automatically.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ℹ️ SmartScanner has tests for known vulnerabilities in different CMSs. Check the &lt;a href=&quot;/docs/wordpress-drupal-joomla-cms-security-scanner&quot;&gt;documentation page&lt;/a&gt; for more.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We will continue to add more tests for known vulnerabilities to the SmartScanner in the next versions. But SmartScanner is a Smart web vulnerability scanner! It already can find up to &lt;a href=&quot;/vulnerability-list/&quot;&gt;215 vulnerabilities&lt;/a&gt; in any web application like Joomla!&lt;/p&gt;

&lt;h2 id=&quot;brute-force-to-find-weak-passwords&quot;&gt;Brute Force to find Weak Passwords&lt;/h2&gt;
&lt;p&gt;SmartScanner can automatically detect login forms and try out common weak passwords. There were few bugs preventing this test which got fixed in this version.
Also, a new feature was added to bypass CSRF defending mechanisms in the login forms.&lt;/p&gt;

&lt;p&gt;Now SmartScanner can test for common weak user/pass combinations on any login form.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/download&quot; class=&quot;f3 ph3 pv2 ma2 ml0 mb0 dib br1 white&quot;&gt;Download SmartScanner Free&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;/docs/changelog&quot;&gt;change log&lt;/a&gt; for details on changes in this version.&lt;/p&gt;</content><author><name></name></author><category term="Release" /><category term="Joomla" /><summary type="html">SmartScanner version 1.9 was released with 22 new tests for Joomla!® and test counts are going to go up!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.thesmartscanner.com/assets/img/smarscanner-v1-9.png" /><media:content medium="image" url="https://www.thesmartscanner.com/assets/img/smarscanner-v1-9.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">These 7 PHP mistakes leave your website open to the hackers</title><link href="https://www.thesmartscanner.com/blog/these-7-php-mistakes-leave-your-website-open-to-the-hackers" rel="alternate" type="text/html" title="These 7 PHP mistakes leave your website open to the hackers" /><published>2021-08-15T00:00:00+00:00</published><updated>2021-08-15T00:00:00+00:00</updated><id>https://www.thesmartscanner.com/blog/these-7-php-mistakes-leave-your-website-open-to-the-hackers-</id><content type="html" xml:base="https://www.thesmartscanner.com/blog/these-7-php-mistakes-leave-your-website-open-to-the-hackers">&lt;p&gt;Make these mistakes and hackers will attack your web application using Cross Site Scripting, SQL Injection, Path Traversal, and other attacks to take over your website.&lt;/p&gt;

&lt;p&gt;Let’s review common mistakes and their prevention methods.&lt;/p&gt;

&lt;h2 id=&quot;1--echo-user-input&quot;&gt;1- &lt;code&gt;Echo&lt;/code&gt; user input&lt;/h2&gt;
&lt;p&gt;Below code is enough to create a &lt;a href=&quot;/vulnerability-list/cross-site-scripting&quot;&gt;XSS&lt;/a&gt; vulnerability in your website.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;echo '&amp;lt;p&amp;gt;' . $_GET['name'] . '&amp;lt;/p&amp;gt;'; // vulnerable to XSS
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Never directly use user input for generating response contents. You have to use proper encoding on user input to escape any dangerous code. PHP has the build-in &lt;code&gt;htmlentities()&lt;/code&gt; function to encode html special characters which you can use.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;echo '&amp;lt;p&amp;gt;' . htmlentities($_GET['name']) . '&amp;lt;/p&amp;gt;'; // safe code
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
  &lt;p&gt;Sometimes user input is used indirectly for generating a page. For example, user input might be saved in a database before being used in the response.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;2--using-user-input-in-file-paths&quot;&gt;2- Using user input in file paths&lt;/h2&gt;
&lt;p&gt;Generating and using file paths that contain user inputs is one of the most dangerous mistakes that can cause critical vulnerabilities like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/vulnerability-list/local-file-inclusion&quot;&gt;Local File Inclusion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/vulnerability-list/remote-file-inclusion&quot;&gt;Remote File Inclusion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/vulnerability-list/remote-file-disclosure&quot;&gt;Remote File Disclosure&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/vulnerability-list/remote-url-inclusion&quot;&gt;Remote URL Inclusion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Path Traversal&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below code is an example of a file inclusion vulnerability.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;include $_GET['file']; // vulnerable to remote/local file inclusion
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To prevent file inclusion vulnerabilities:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Resolve all relative paths containing &lt;code&gt;./&lt;/code&gt; and &lt;code&gt;../&lt;/code&gt; to absolute paths and make sure the final file is in the directory where it should be.&lt;/li&gt;
  &lt;li&gt;Try to accept only whitelisted inputs whenever possible&lt;/li&gt;
  &lt;li&gt;Check for invalid characters in the filename like null byte, questions mark, semicolon, etc.&lt;/li&gt;
  &lt;li&gt;Do not include URLs starting with a scheme (http://, ftp://, etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3--concatenating-sql-queries-with-user-input&quot;&gt;3- Concatenating SQL queries with user input&lt;/h2&gt;
&lt;p&gt;Creating SQL queries using user input allows users to manipulate the original SQL command and inject their arbitrary command. This is called &lt;a href=&quot;/vulnerability-list/sql-injection&quot;&gt;SQL Injection&lt;/a&gt;. Hackers can exploit SQL Injection vulnerability to execute commands like &lt;code&gt;drop&lt;/code&gt; on the database or execute system commands.&lt;/p&gt;

&lt;p&gt;Example code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
$db = new SQLite3('products.db');
$id = $_GET['id'];
// below line is vulnerable to SQLI
$name = $db-&amp;gt;querySingle(&quot;SELECT name from products where productId=$id&quot;);
// below line is not vulnerable
$name = $db-&amp;gt;querySingle(&quot;SELECT name from products where productId='&quot; .
SQLite3::escapeString($id) . &quot;'&quot;);

echo $name ;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It’s always a good practice to use prepared statements for creating SQL queries to prevent SQL Injection. Another method to avoid SQLI is to escape special characters in the user input (like the above example).&lt;/p&gt;

&lt;h2 id=&quot;4--executing-user-input&quot;&gt;4- Executing user input&lt;/h2&gt;
&lt;p&gt;Below commands in PHP allow execution of either PHP code or OS commands.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;eval()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;preg_replace()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;system()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;exec()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;passthru()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;shell_exec()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Passing user input as arguments to the above functions can cause &lt;a href=&quot;/vulnerability-list/os-command-execution&quot;&gt;command execution&lt;/a&gt; vulnerabilities where hackers can execute arbitrary commands on the server. Consider below code as an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$ip = $_GET['ip'];
echo exec(&quot;ping $ip&quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above code is a ping service where users can ping any IP. If a user enters &lt;code&gt;1 &amp;amp; echo 123&lt;/code&gt; as an IP address then the command &lt;code&gt;echo&lt;/code&gt; gets executed on the server.&lt;/p&gt;

&lt;p&gt;How to prevent command execution vulnerabilities:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Avoid using functions like &lt;code&gt;eval()&lt;/code&gt;, &lt;code&gt;system()&lt;/code&gt;, …&lt;/li&gt;
  &lt;li&gt;Accept whitelisted inputs&lt;/li&gt;
  &lt;li&gt;Check inputs for special characters like &amp;amp;, semicolon,&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;The &lt;code&gt;popen()&lt;/code&gt; function can also be used for command execution indirectly. So be careful when using it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;5--redirecting-to-user-input&quot;&gt;5- Redirecting to user input&lt;/h2&gt;
&lt;p&gt;Redirecting a user in PHP is common and easy. It can be done using below code.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;header('Location: ' . $_GET['url']); // vulnerable code
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But this is vulnerable! It can be exploited to redirect the user to any other website.
To prevent &lt;a href=&quot;/vulnerability-list/unvalidated-redirection&quot;&gt;open redirections&lt;/a&gt;, make sure the URL is not an off-site link before redirecting the user.&lt;/p&gt;

&lt;h2 id=&quot;6--displaying-errors&quot;&gt;6- Displaying errors&lt;/h2&gt;
&lt;p&gt;PHP errors disclose information like path/files, database errors, OS type, and some other information. Displaying any kind of PHP errors on production helps hackers to break into your website easier.
But you still need to log and review PHP errors on the production server. So you should have errors reported but not shown to the user.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;error_reporting(E_ALL); // enable reporting of errors

display_errors(true); // bad code for production, it displays all errors to the user
display_errors(false); // safe for production usage, no error is shown to user
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;7--phpinfo&quot;&gt;7- &lt;code&gt;phpInfo()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;/vulnerability-list/phpinfo-found&quot;&gt;&lt;code&gt;phpInfo()&lt;/code&gt;&lt;/a&gt; function displays a huge amount of information. PHP version number, active extensions, configurations, and system paths are a few examples of such information. This information can be used by hackers to learn about the server and craft their attacks to be more successful.
To avoid any information disclosure it’s better to never use the &lt;code&gt;phpInfo()&lt;/code&gt; function on production servers.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Dealing with user inputs in PHP applications can be tricky and prone to different vulnerabilities. XSS, SQL Injection, and local file inclusion are a few of explained vulnerabilities related to user inputs. Make sure you have strict checking for user inputs and avoid using risky functions like &lt;code&gt;eval()&lt;/code&gt; and &lt;code&gt;phpInfo()&lt;/code&gt; to have a more secure code.&lt;/p&gt;</content><author><name></name></author><category term="PHP" /><category term="Programming" /><category term="Vulnerability" /><category term="XSS" /><category term="File Inclusion" /><category term="Path Traversal" /><category term="URL Redirection" /><category term="Information Disclosure" /><category term="SQLI" /><category term="RCE" /><category term="Injection" /><summary type="html">Make these mistakes and hackers will attack your web application using Cross Site Scripting, SQL Injection, Path Traversal, and other attacks to take over your website.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.thesmartscanner.com/assets/img/common-php-mistakes.webp" /><media:content medium="image" url="https://www.thesmartscanner.com/assets/img/common-php-mistakes.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>